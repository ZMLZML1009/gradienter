C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg52.h>
   2          #include<intrins.h>
   3          #include<math.h>
   4          
   5          #define uchar unsigned char
   6          #define uint unsigned int
   7          
   8          #define high 1
   9          #define low 0
  10          
  11          #define Brightness      0xCF 
  12          #define X_WIDTH         128
  13          #define Y_WIDTH         64
  14          #define N           15
  15          
  16          sbit  SCL = P0^0;                                               //OLED串行时钟
  17          sbit  SDA = P0^1;                                               //OLED串行数据
  18          sbit SCLK = P2^7;                                                                                               //ADXL345时钟信号
  19          sbit  SDI = P2^6;                                                                                               //ADXL345数据读写端
  20          sbit   CS = P2^5;                                                                                               //ADXL345片选信号
  21          
  22          void delay_ms(uchar ms);        
  23          void OLED_Init();                 
  24          void OLED_WrCmd(unsigned char IIC_Command);        
  25          void OLED_Fill(unsigned char bmp_dat);          
  26          void OLED_Set_Pos(unsigned char x, unsigned char y); 
  27          void IIC_Start();
  28          void Write_IIC_Byte(unsigned char IIC_Byte);
  29          void IIC_Stop();                                          
  30          void OLED_WrDat(unsigned char IIC_Data);
  31          void OLED_CLS(void);
  32          
  33          void ADXL345_init();
  34          void Write_Data(uchar Adress_Reg,uchar Data_write);
  35          void Read_Data();
  36          uchar Read_Data_Reg(uchar Adress_Reg);
  37          void transform();                          
  38          int filterx(int val);   
  39          int filtery(int val);
  40          
  41          uint Data_X_2[2];
  42          uint Data_Y_2[2];
  43          int Data_X;Data_Y;
  44          uchar X,Y;        
  45          uchar kx,ky;
  46          int value_bufx[N]=0;
  47          int value_bufy[N]=0;
  48          
  49          unsigned char code BMP2[] =
  50          {
  51          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  52          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  53          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  54          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
  55          0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,
C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 2   

  56          0x00,0x00,0x00,0x10,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x30,0x00,0x00,0x00,
  57          0x00,0x00,0x00,0x70,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x38,0x00,0x00,0x00,
  58          0x00,0x00,0x00,0x78,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x18,0x00,0x00,0x00,
  59          0x00,0x00,0x00,0x38,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x18,0x00,0x00,0x00,
  60          0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x1C,0x00,0x00,0x00,
  61          0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,
  62          0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,
  63          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  64          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  65          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  66          0x00,0x00,0x00,0xC0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x64,0x00,0x00,0x00,
  67          0x00,0x00,0x00,0xE0,0x66,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x37,0x00,0x00,0x00,
  68          0x00,0x00,0x00,0xCE,0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x1B,0x00,0x00,0x00,
  69          0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x00,
  70          0x00,0x00,0x00,0xE0,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0xF0,0x43,0x03,0x00,0x00,
  71          0x00,0x00,0x00,0x4E,0x40,0x00,0x00,0x00,0x00,0x00,0x80,0x47,0x4B,0x00,0x00,0x00,
  72          0x00,0x00,0x80,0x61,0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0xE8,0x3F,0x00,0x00,0x00,
  73          0x00,0x00,0x00,0xE6,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0xD2,0x32,0x00,0x00,0x00,
  74          0x00,0x00,0x00,0x10,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,
  75          0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  76          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  77          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  78          0x00,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x31,0x00,0x00,0x00,
  79          0x00,0x00,0x00,0x80,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1C,0x00,0x00,0x00,
  80          0x00,0x00,0x00,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x41,0x00,0x00,0x00,
  81          0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,
  82          0x00,0x00,0x80,0xFF,0xFF,0x01,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x01,0x00,0x00,
  83          0x00,0x00,0x00,0xD0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x98,0x01,0x00,0x00,0x00,
  84          0x00,0x00,0x00,0x0C,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x02,0x00,0x00,0x00,
  85          0x00,0x00,0x00,0x02,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,
  86          0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,
  87          0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,
  88          0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  89          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  90          0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
  91          0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
  92          0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x03,0x00,0x00,0x00,
  93          0x00,0x00,0x00,0x33,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x01,0x00,0x00,0x00,
  94          0x00,0x00,0x00,0x93,0x0F,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x07,0x00,0x00,
  95          0x00,0x00,0x80,0xE3,0x01,0x00,0x00,0x00,0x00,0x00,0x80,0xB1,0x01,0x00,0x00,0x00,
  96          0x00,0x00,0x80,0x99,0x01,0x00,0x00,0x00,0x00,0x00,0x80,0x8C,0x01,0x00,0x00,0x00,
  97          0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,
  98          0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
  99          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 100          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 101          0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
 102          0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0x00,0x00,0x00,
 103          0x00,0x00,0x00,0xF8,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x00,0x00,0x00,
 104          0x00,0x00,0x00,0x07,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,
 105          0x00,0x00,0x00,0xC0,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x30,0x00,0x00,0x00,
 106          0x00,0x00,0x00,0x8E,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x8C,0x07,0x00,0x00,0x00,
 107          0x00,0x00,0x00,0x08,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x07,0x00,0x00,0x00,
 108          0x00,0x00,0x00,0xF0,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x18,0x00,0x00,0x00,
 109          0x00,0x00,0x00,0x06,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,
 110          0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,
 111          0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,
 112          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 113          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 114          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 115          };                                 
 116          unsigned char code BMP[] =
 117          {
C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 3   

 118          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 119          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 120          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 121          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 122          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 123          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 124          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 125          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 126          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 127          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 128          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 129          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 130          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 131          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 132          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 133          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 134          0x00,0x00,0x00,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,0x80,0x07,0xE0,0x01,0x00,0x00,
 135          0x00,0x00,0x70,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x30,0x00,0x00,
 136          0x00,0x00,0x03,0x00,0x00,0xC0,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x03,0x00,
 137          0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,
 138          0x00,0x08,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,
 139          0x00,0x02,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,
 140          0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,
 141          0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
 142          0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
 143          0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
 144          0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
 145          0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,
 146          0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,
 147          0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
 148          0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
 149          0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,
 150          0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
 151          0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
 152          0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,
 153          0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,
 154          0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
 155          0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
 156          0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
 157          0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
 158          0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
 159          0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
 160          0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x40,0x00,
 161          0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x10,0x00,
 162          0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,
 163          0x00,0xC0,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0xC0,0x00,0x00,
 164          0x00,0x00,0x0C,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x0E,0x00,0x00,
 165          0x00,0x00,0x80,0x07,0xE0,0x01,0x00,0x00,0x00,0x00,0x00,0xF8,0x1F,0x00,0x00,0x00,
 166          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 167          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 168          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 169          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 170          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 171          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 172          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 173          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 174          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 175          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 176          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 177          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 178          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 179          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 4   

 180          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 181          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 182          };
 183          
 184          void main()
 185          {
 186   1              int x,y,x1,y1=0;
 187   1              int RR=0;
 188   1              float xx,yy;
 189   1              int dataxa=0,dataya=0;
 190   1              uchar num0,num1,num2;
 191   1              OLED_Init(); //OLED初始化
 192   1              ADXL345_init();
 193   1              OLED_Set_Pos(0,0);
 194   1              for(x=0;x<128;x++)
 195   1              {
 196   2                      for(y=0;y<64;y=y+8)
 197   2                      {
 198   3                              OLED_WrDat(BMP2[8*x+y/8]);      
 199   3                      }
 200   2              }
 201   1              delay_ms(1000);
 202   1              OLED_Set_Pos(0,0);
 203   1              for(x=0;x<128;x++)
 204   1              {
 205   2                      for(y=0;y<64;y=y+8)
 206   2                      {
 207   3                              OLED_WrDat(BMP[8*x+y/8]);       
 208   3                      }
 209   2              }       
 210   1              while(1)
 211   1              {
 212   2                      Read_Data();
 213   2                      transform();
 214   2                      if(Data_X>999)
 215   2                              Data_X=999;
 216   2                      if(Data_Y>999)
 217   2                              Data_Y=999;
 218   2                      Data_X=Data_X/10;
 219   2                      Data_Y=Data_Y/10;
 220   2                      //滤波
 221   2                      dataxa=filterx(Data_X);
 222   2                      dataya=filtery(Data_Y);  
 223   2                      //矫正
 224   2                      dataxa=dataxa-1;
 225   2                      dataya=dataya+2;
 226   2                      //限位
 227   2                      RR=dataxa*dataxa+dataya*dataya;
 228   2                      if(RR>784)
 229   2                      {
 230   3                              xx=dataxa*dataxa*784.0/RR;
 231   3                              yy=dataya*dataya*784.0/RR;
 232   3                              if(dataya>0)
 233   3                                      x=60-sqrt(yy);
 234   3                              else
 235   3                                      x=60+sqrt(yy);
 236   3                              if(dataxa>0)
 237   3                                      y=28+sqrt(xx);
 238   3                              else
 239   3                                      y=28-sqrt(xx);
 240   3                      }
 241   2                      else
C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 5   

 242   2                      {
 243   3                              x=60-dataya;
 244   3                              y=28+dataxa;
 245   3                      }
 246   2                      //x范围0~120，y范围0~56，中心点坐标(60,28)
 247   2                      //覆盖圆圈
 248   2                      OLED_Set_Pos(x1,y1/8);
 249   2                      OLED_WrDat(BMP[8*x1+y1/8]);
 250   2                      OLED_WrDat(BMP[8*x1+y1/8+1]);
 251   2                      OLED_Set_Pos(x1+1,y1/8);
 252   2                      OLED_WrDat(BMP[8*(x1+1)+y1/8]);
 253   2                      OLED_WrDat(BMP[8*(x1+1)+y1/8+1]);
 254   2                      OLED_Set_Pos(x1+2,y1/8);
 255   2                      OLED_WrDat(BMP[8*(x1+2)+y1/8]);
 256   2                      OLED_WrDat(BMP[8*(x1+2)+y1/8+1]);
 257   2                      OLED_Set_Pos(x1+3,y1/8);
 258   2                      OLED_WrDat(BMP[8*(x1+3)+y1/8]);
 259   2                      OLED_WrDat(BMP[8*(x1+3)+y1/8+1]);
 260   2                      OLED_Set_Pos(x1+4,y1/8);
 261   2                      OLED_WrDat(BMP[8*(x1+4)+y1/8]);
 262   2                      OLED_WrDat(BMP[8*(x1+4)+y1/8+1]);
 263   2                      OLED_Set_Pos(x1+5,y1/8);
 264   2                      OLED_WrDat(BMP[8*(x1+5)+y1/8]);
 265   2                      OLED_WrDat(BMP[8*(x1+5)+y1/8+1]);
 266   2                      OLED_Set_Pos(x1+6,y1/8);
 267   2                      OLED_WrDat(BMP[8*(x1+6)+y1/8]);
 268   2                      OLED_WrDat(BMP[8*(x1+6)+y1/8+1]);
 269   2                      OLED_Set_Pos(x1+7,y1/8);
 270   2                      OLED_WrDat(BMP[8*(x1+7)+y1/8]);
 271   2                      OLED_WrDat(BMP[8*(x1+7)+y1/8+1]);
 272   2                      if((x==60||x==59||x==61)&&(y==28||y==26||y==27))   //正好在中心
 273   2                      {
 274   3                              num0=0x3c;
 275   3                              num1=0x7e;
 276   3                              num2=0xff;
 277   3                      }
 278   2                      else
 279   2                      {
 280   3                              num0=0x3c;
 281   3                              num1=0x42;
 282   3                              num2=0x81;
 283   3                      }
 284   2                      OLED_Set_Pos(x,y/8);
 285   2                      OLED_WrDat(BMP[8*(x+0)+y/8]|(num0<<y%8));
 286   2                      OLED_WrDat(BMP[8*(x+0)+y/8+1]|(num0>>(8-y%8)));
 287   2                      OLED_Set_Pos(x+1,y/8);
 288   2                      OLED_WrDat(BMP[8*(x+1)+y/8]|(num1<<y%8));
 289   2                      OLED_WrDat(BMP[8*(x+1)+y/8+1]|(num1>>(8-y%8)));
 290   2                      OLED_Set_Pos(x+2,y/8);
 291   2                      OLED_WrDat(BMP[8*(x+2)+y/8]|(num2<<y%8));
 292   2                      OLED_WrDat(BMP[8*(x+2)+y/8+1]|(num2>>(8-y%8)));
 293   2                      OLED_Set_Pos(x+3,y/8);
 294   2                      OLED_WrDat(BMP[8*(x+3)+y/8]|(num2<<y%8));
 295   2                      OLED_WrDat(BMP[8*(x+3)+y/8+1]|(num2>>(8-y%8)));
 296   2                      OLED_Set_Pos(x+4,y/8);
 297   2                      OLED_WrDat(BMP[8*(x+4)+y/8]|(num2<<y%8));
 298   2                      OLED_WrDat(BMP[8*(x+4)+y/8+1]|(num2>>(8-y%8)));
 299   2                      OLED_Set_Pos(x+5,y/8);
 300   2                      OLED_WrDat(BMP[8*(x+5)+y/8]|(num2<<y%8));
 301   2                      OLED_WrDat(BMP[8*(x+5)+y/8+1]|(num2>>(8-y%8)));
 302   2                      OLED_Set_Pos(x+6,y/8);
 303   2                      OLED_WrDat(BMP[8*(x+6)+y/8]|(num1<<y%8));
C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 6   

 304   2                      OLED_WrDat(BMP[8*(x+6)+y/8+1]|(num1>>(8-y%8)));
 305   2                      OLED_Set_Pos(x+7,y/8);
 306   2                      OLED_WrDat(BMP[8*(x+7)+y/8]|(num0<<y%8));
 307   2                      OLED_WrDat(BMP[8*(x+7)+y/8+1]|(num0>>(8-y%8))); 
 308   2                      x1=x;
 309   2                      y1=y;    
 310   2              }
 311   1      }
 312          
 313          void delay_ms(uchar ms)
 314          {
 315   1              uchar i;
 316   1              while(ms--)
 317   1              {
 318   2                      for(i=0;i<250;i++)
 319   2                      {
 320   3                              _nop_();
 321   3                              _nop_();
 322   3                              _nop_();
 323   3                              _nop_();
 324   3                      }
 325   2              }
 326   1      }
 327          
 328          void OLED_Init(void)
 329          {
 330   1              delay_ms(500);//初始化之前的延时很重要！
 331   1              OLED_WrCmd(0xae);//--turn off oled panel
 332   1              OLED_WrCmd(0x00);//---set low column address
 333   1              OLED_WrCmd(0x10);//---set high column address
 334   1              OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 335   1              OLED_WrCmd(0x81);//--set contrast control register
 336   1              OLED_WrCmd(Brightness); // Set SEG Output Current Brightness
 337   1              OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 338   1              OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 339   1              OLED_WrCmd(0xa6);//--set normal display
 340   1              OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
 341   1              OLED_WrCmd(0x3f);//--1/64 duty
 342   1              OLED_WrCmd(0xd3);//-set display offset  Shift Mapping RAM Counter (0x00~0x3F)
 343   1              OLED_WrCmd(0x00);//-not offset
 344   1              OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
 345   1              OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 346   1              OLED_WrCmd(0xd9);//--set pre-charge period
 347   1              OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 348   1              OLED_WrCmd(0xda);//--set com pins hardware configuration
 349   1              OLED_WrCmd(0x12);
 350   1              OLED_WrCmd(0xdb);//--set vcomh
 351   1              OLED_WrCmd(0x40);//Set VCOM Deselect Level
 352   1              OLED_WrCmd(0x20);//-Set Addressing Mode (0x00/0x01/0x02)
 353   1              OLED_WrCmd(0x01);//
 354   1              OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
 355   1              OLED_WrCmd(0x14);//--set(0x10) disable
 356   1              OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
 357   1              OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
 358   1              OLED_WrCmd(0xaf);//--turn on oled panel
 359   1              OLED_Fill(0x00); //初始清屏
 360   1              OLED_Set_Pos(0,0);
 361   1      } 
 362          
 363          void OLED_WrCmd(unsigned char IIC_Command)
 364          {
 365   1              IIC_Start();
C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 7   

 366   1              Write_IIC_Byte(0x78);            //Slave address,SA0=0
 367   1              Write_IIC_Byte(0x00);                   //write command
 368   1              Write_IIC_Byte(IIC_Command);
 369   1              IIC_Stop();
 370   1      }
 371          
 372          void OLED_Fill(unsigned char bmp_dat) 
 373          {
 374   1              int i;
 375   1              OLED_Set_Pos(0,0);
 376   1              for(i=0;i<128*8;i++)
 377   1                      OLED_WrDat(bmp_dat);
 378   1      }
 379          
 380          void OLED_Set_Pos(unsigned char x, unsigned char y) 
 381          { 
 382   1              OLED_WrCmd(0xb0+y);
 383   1              OLED_WrCmd(((x&0xf0)>>4)|0x10);
 384   1              OLED_WrCmd(x&0x0f);
 385   1      } 
 386          
 387          void IIC_Start()
 388          {
 389   1         SCL = high;          
 390   1         SDA = high;
 391   1         SDA = low;
 392   1         SCL = low;
 393   1      }
 394          
 395          void Write_IIC_Byte(unsigned char IIC_Byte)
 396          {
 397   1              unsigned char i;
 398   1              for(i=0;i<8;i++)
 399   1              {
 400   2                      if(IIC_Byte & 0x80)
 401   2                              SDA=high;
 402   2                      else
 403   2                              SDA=low;
 404   2                      SCL=high;
 405   2                      SCL=low;
 406   2                      IIC_Byte<<=1;
 407   2              }
 408   1              SDA=1;
 409   1              SCL=1;
 410   1              SCL=0;
 411   1      }
 412          
 413          void IIC_Stop()
 414          {
 415   1         SCL = low;
 416   1         SDA = low;
 417   1         SCL = high;
 418   1         SDA = high;
 419   1      }
 420          
 421          void OLED_WrDat(unsigned char IIC_Data)
 422          {
 423   1              IIC_Start();
 424   1              Write_IIC_Byte(0x78);
 425   1              Write_IIC_Byte(0x40);                   //write data
 426   1              Write_IIC_Byte(IIC_Data);
 427   1              IIC_Stop();
C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 8   

 428   1      }
 429          
 430          void ADXL345_init()
 431          {
 432   1              Write_Data(0x31,0x4b);            //寄存器DATA_FORMAT*  D7：禁用自测力；D6：3线SPI；D5：中断高电平有效；D4：0；D3
             -：全分辨率模式；D2：左对齐模式；D1D0：测量范围正负16g；
 433   1              delay_ms(10);
 434   1              Write_Data(0x2C,0x08);            //寄存器BW_RATE       D7D6D5：000；D4：非低功耗；D3D2D1D0：0111输出数据速率12.5
             -HZ，带宽6.25HZ； 
 435   1              delay_ms(10);
 436   1              Write_Data(0x2D,0x08);            //寄存器PWOER_CTL*    D7D6:00；D5：静止功能和活动功能同时进行；D4：禁止自动进入
             -休眠模式；D3：测量模式（非待机模式）；D2：普通模式（非休眠模式）；D1D0：休眠模式下的数据读取速率；
 437   1              delay_ms(10);
 438   1              Write_Data(0x2E,0x80);            //寄存器INT_ENABLE*   D7：使能DATA_READY中断；D6~D0：不使能其他中断；
 439   1              delay_ms(10);
 440   1              Write_Data(0x2F,0x00);            //寄存器INT_MAP       D7：发送DATA_READY中断到INT1引脚；
 441   1              delay_ms(10);
 442   1              Write_Data(0x1E,0xfe);            //寄存器OFSX          X轴偏移量11111110；（比例系数15.6mg/LSB；）
 443   1              delay_ms(10);
 444   1              Write_Data(0x1F,0x00);            //寄存器OFSY          Y轴偏移量00000000；
 445   1              delay_ms(10);
 446   1              Write_Data(0x20,0xf7);            //寄存器OFSZ          Z轴偏移量11110111；
 447   1              delay_ms(10);
 448   1              Write_Data(0x21,0x00);            //寄存器DUR           敲击延时00000000：禁用单击/双击功能（比例系数625μs/LSB）
             -；
 449   1              delay_ms(10);
 450   1              Write_Data(0x22,0x00);            //寄存器latent                检测第一次敲击后的延时00000000：禁用双击功能（比例系数1.25ms/LS
             -B）； 
 451   1              delay_ms(10);
 452   1              Write_Data(0x23,0x00);            //寄存器Window                二次敲击延时00000000；禁用双击功能（比例系数1.25ms/LSB）；
 453   1              delay_ms(10);
 454   1              Write_Data(0x24,0x00);            //寄存器THRESH_ACT    保存检测活动阀值00000000（比例系数62.5mg/LSB）；
 455   1              delay_ms(10);
 456   1              Write_Data(0x25,0x00);            //寄存器THRESH_INACT  保存检测静止阀值00000000（比例系数62.5mg/LSB）；                                                          
             - 
 457   1              delay_ms(10);
 458   1              Write_Data(0x26,0x2b);            //寄存器TIME_INACT    检测活动时间阀值00101011=43s（比例系数1s/LSB）；
 459   1              delay_ms(10);
 460   1              Write_Data(0x27,0x00);            //寄存器ACT_INACT_CTL D7~D0:00000000禁用活动、静止检测；
 461   1              delay_ms(10);
 462   1              Write_Data(0x28,0x09);            //寄存器THRESH_FF             检测自由落体阀值00001001=600mg（比例系数62.5mg/LSB）；
 463   1              delay_ms(10);
 464   1              Write_Data(0x29,0xff);            //寄存器TIME_FF               保存检测自由落体时间阀值11111111=1275ms（5ms/LSB）；
 465   1              delay_ms(10);
 466   1              Write_Data(0x2A,0x80);            //寄存器TAP_AXES              D7~D4：0；
 467   1              delay_ms(10);
 468   1      }
 469          
 470          void Write_Data(uchar Adress_Reg,uchar Data_write)
 471          {
 472   1              uchar i=0;
 473   1              Adress_Reg = (Adress_Reg & 0x7f);                                                       //置最高位为0，写状态
 474   1              Adress_Reg = (Adress_Reg & 0xbf);                           //置第二高位0，单字读写
 475   1      
 476   1              CS=0;
 477   1              _nop_();                  
 478   1              SCLK=1;         
 479   1              _nop_();
 480   1              for(i=0;i<8;i++)         
 481   1              {
 482   2                      SCLK=0;         
 483   2                      _nop_();        
C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 9   

 484   2                      SDI=(bit)(Adress_Reg & 0x80);                                                   //发送第一位数据
 485   2                      _nop_();        
 486   2                      _nop_();        
 487   2                      _nop_();        
 488   2                      SCLK=1;         
 489   2                      _nop_();
 490   2                      _nop_();
 491   2                      Adress_Reg<<=1;                                                                                 //数据串左移，准备发送第二位
 492   2              }
 493   1              for(i=0;i<8;i++)        
 494   1              {
 495   2                      SCLK=0;         
 496   2                      _nop_();
 497   2                      SDI=(bit)(Data_write & 0x80);   
 498   2                      _nop_();
 499   2                      _nop_();
 500   2                      _nop_();
 501   2                      SCLK=1;         
 502   2                      _nop_();        
 503   2                      _nop_();        
 504   2                      Data_write<<=1;           
 505   2              }
 506   1              _nop_();        
 507   1              _nop_();        
 508   1              SCLK=1;         
 509   1              _nop_();
 510   1              _nop_();        
 511   1              SDI=1;          
 512   1              CS=1;
 513   1      }
 514          
 515          void Read_Data()                                         
 516          {
 517   1              Data_X_2[0]=Read_Data_Reg(0x32);                            //读出X轴低位                       
 518   1              Data_X_2[1]=Read_Data_Reg(0x33);                            //读出X轴高位
 519   1              delay_ms(10);    
 520   1              Data_Y_2[0]=Read_Data_Reg(0x34);                            //读出Y轴低位
 521   1              Data_Y_2[1]=Read_Data_Reg(0x35);                            //读出Y轴高位
 522   1      }
 523          
 524          uchar Read_Data_Reg(uchar Adress_Reg)
 525          {
 526   1              uchar i=0;
 527   1              uchar Data_Read;
 528   1              Adress_Reg=(Adress_Reg | 0x80);                             //置最高位为1，读状态
 529   1              Adress_Reg=(Adress_Reg & 0xbf);                             //置第二高位0，单字读写
 530   1              CS=0;
 531   1              _nop_();        
 532   1              _nop_();        
 533   1              SCLK=1;         
 534   1              _nop_();        
 535   1              _nop_();
 536   1              for(i=0;i<8;i++)        
 537   1              {
 538   2                      SCLK=0;         
 539   2                      _nop_();        
 540   2                      SDI=(bit)(Adress_Reg & 0x80);     
 541   2                      _nop_();        
 542   2                      _nop_();
 543   2                      _nop_();
 544   2                      SCLK=1;         
 545   2                      _nop_();
C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 10  

 546   2                      _nop_();        
 547   2                      Adress_Reg<<=1;          
 548   2              }
 549   1              for(i=0;i<8;i++)        
 550   1              {
 551   2                      SCLK=0;     
 552   2                      Data_Read<<=1;                                                                              //Data_Read左移1位
 553   2                      _nop_();        
 554   2                      Data_Read|=(uchar)SDI;                                  //将第一个数据存入Data_Read最低位
 555   2                      _nop_();        
 556   2                      _nop_();        
 557   2                      SCLK=1;         
 558   2                      _nop_();        
 559   2                      _nop_();
 560   2              }
 561   1              _nop_();
 562   1              _nop_();        
 563   1              SCLK=1; 
 564   1              _nop_();        
 565   1              CS=1;
 566   1              return Data_Read;                                           //返回读取到的内容
 567   1      }
 568          
 569          void transform()                                         
 570          {
 571   1              Data_X=(Data_X_2[0])+(Data_X_2[1]<<8);                          
 572   1              Data_Y=(Data_Y_2[0])+(Data_Y_2[1]<<8);    
 573   1              
 574   1              if(Data_X&0x1000)
 575   1              {                                                                  
 576   2                      Data_X=(~Data_X)+1;                                                 //若位负数，转换为补码
 577   2                      X=0;                                                                        //标记符号-
 578   2                      Data_X=Data_X*3.95;                                                                             //乘比例系数3.8
 579   2              }
 580   1              else
 581   1              {
 582   2                      X=1;                                                                        //标记符号+
 583   2                      Data_X=Data_X*3.7;                                                  //乘比例系数3.78
 584   2              }
 585   1              if(Data_Y&0x1000)
 586   1              {                                                                  
 587   2                      Data_Y=(~Data_Y)+1;                        
 588   2                      Y=0;                                              
 589   2                      Data_Y=Data_Y*3.8;                         
 590   2              }
 591   1              else
 592   1              {
 593   2                      Y=1;                                              
 594   2                      Data_Y=Data_Y*3.95;                        
 595   2              }
 596   1      }
 597            
 598          int filterx(int val)
 599          {
 600   1          unsigned char count;
 601   1          int sum=0;
 602   1          value_bufx[kx]=val;
 603   1              if(X==0)
 604   1                      value_bufx[kx]=-value_bufx[kx];
 605   1              kx++;
 606   1          if(kx==N)
 607   1                      kx=0;
C51 COMPILER V9.00   MAIN                                                                  06/25/2018 17:50:35 PAGE 11  

 608   1          for(count=0;count<N;count++)
 609   1                      sum+=value_bufx[count];
 610   1          return(int)(sum/N);
 611   1      }
 612          int filtery(int val)
 613          {
 614   1          unsigned char count;
 615   1          int sum=0;
 616   1          value_bufy[ky]=val; 
 617   1              if(Y==0)
 618   1                      value_bufy[ky]=-value_bufy[ky];
 619   1              ky++;
 620   1          if(ky==N)
 621   1                      ky=0;
 622   1          for(count=0;count<N;count++)
 623   1                      sum+=value_bufy[count];
 624   1          return(int)(sum/N);
 625   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4104    ----
   CONSTANT SIZE    =   2048    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     76      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
